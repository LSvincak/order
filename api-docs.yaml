openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /api/orders/{orderId}:
    put:
      tags:
      - order-controller
      operationId: updateOrderStatus
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: newStatus
        in: query
        required: true
        schema:
          type: string
      - name: updaterUserId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/users:
    get:
      tags:
      - user-controller
      operationId: getAllUsers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
      - user-controller
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /api/orders/{userId}:
    post:
      tags:
      - order-controller
      operationId: createOrder
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Order"
  /hello:
    get:
      tags:
      - demo-application
      operationId: hello
      parameters:
      - name: name
        in: query
        required: false
        schema:
          type: string
          default: World
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/users/{id}:
    get:
      tags:
      - user-controller
      operationId: getUserById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
    delete:
      tags:
      - user-controller
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/orders/user/{userId}:
    get:
      tags:
      - order-controller
      operationId: getOrdersByUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
  /api/orders/status/{status}:
    get:
      tags:
      - order-controller
      operationId: getOrdersByStatus
      parameters:
      - name: status
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
components:
  schemas:
    Address:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zipCode:
          type: string
    Order:
      required:
      - description
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
        status:
          type: string
          enum:
          - NEW
          - PROCESSING
          - SHIPPED
          - COMPLETED
          - CANCELLED
        totalPrice:
          type: number
          format: double
        user:
          $ref: "#/components/schemas/User"
        shippingAddress:
          $ref: "#/components/schemas/Address"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    User:
      required:
      - email
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        orders:
          type: array
          items:
            $ref: "#/components/schemas/Order"
        role:
          type: string
          enum:
          - ADMIN
          - CUSTOMER
        address:
          $ref: "#/components/schemas/Address"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
